{%- doc -%}
  header search with live predictive results.
{%- enddoc -%}

<div class="custom-search-wrapper">
  <!-- Mobile icon trigger (Only visible on mobile) -->
  <button class="custom-search-toggle" aria-label="Open search">
    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24">
      <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m17 17l4 4M3 11a8 8 0 1 0 16 0a8 8 0 0 0-16 0"/>
    </svg>
  </button>

  <!-- Desktop inline search -->
  <form
    action="{{ routes.search_url }}"
    method="get"
    role="search"
    class="custom-search-form desktop-search"
  >
    <button type="submit" class="custom-search-icon" aria-label="Search">
      <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24">
        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m17 17l4 4M3 11a8 8 0 1 0 16 0a8 8 0 0 0-16 0"/>
      </svg>
    </button>
    <input
      class="custom-search-input"
      type="search"
      name="q"
      placeholder="{{ 'custom_search.placeholder' | t }}"
      data-aria-open="{{ 'custom_search.aria_open' | t }}"
      data-aria-close="{{ 'custom_search.aria_close' | t }}"
      data-no-results="{{ 'custom_search.no_results' | t }}"
      data-predictive-search-input
      autocomplete="off"
    >
  </form>

  <div
    id="predictive-search-results"
    class="custom-search-dropdown"
    role="listbox"
    aria-label="Search results"
    hidden
  >
    <div data-search-results></div>
  </div>

  <!-- Mobile modal -->
  <div class="custom-search-modal" id="custom-search-modal">
    <div class="custom-search-overlay" data-close-search></div>
    <div class="custom-search-box">
      <form action="{{ routes.search_url }}" method="get" role="search" class="custom-search-form">
        <button type="submit" class="custom-search-icon" aria-label="Search">
          <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24">
            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m17 17l4 4M3 11a8 8 0 1 0 16 0a8 8 0 0 0-16 0"/>
          </svg>
        </button>
        <input
          class="custom-search-input"
          type="search"
          name="q"
          placeholder="{{ 'custom_search.placeholder' | t }}"
          data-aria-open="{{ 'custom_search.aria_open' | t }}"
          data-aria-close="{{ 'custom_search.aria_close' | t }}"
          data-no-results="{{ 'custom_search.no_results' | t }}"
          data-predictive-search-input
          autocomplete="off"
        >
        <button type="button" class="custom-search-close" aria-label="Close search" data-close-search>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m7 7l10 10M7 17L17 7"/>
          </svg>
        </button>
      </form>
      <div class="custom-search-dropdown" role="listbox" hidden>
        <div data-search-results></div>
      </div>
    </div>
  </div>
</div>

{% stylesheet %}
        /* Wrapper */
        .custom-search-wrapper {
          position: relative;
        }

        /* Shared form styles */
        .custom-search-form {
          display: flex;
          align-items: center;
          border: 1px solid var(--color-border);
          border-radius: 9999px;
          background: var(--color-background);
          overflow: hidden;
          box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        }
        .custom-search-form:focus-within {
          box-shadow: 0 4px 12px rgba(0,0,0,0.12);
        }

        /* Input & buttons */
        .custom-search-input {
          flex: 1;
          padding: 0.75em 0.1em;
          font-size: 14px;
          font-family: "Inter", sans-serif;
          border: none;
          background: transparent;
          color: #693f4c !important;
          outline: none;
        }
        .custom-search-icon,
        .custom-search-close {
          /* padding: 0 1em; */
          background: transparent;
          fill: #693f4c;
          stroke: #693f4c;
          border: none;
          cursor: pointer;
          font-size: 1rem;
          max-width: inherit;
        }


        /* Dropdown container */
        .custom-search-dropdown {
          margin-top: 0.5rem;
          background: var(--color-background);
          border: 1px solid var(--color-border);
          border-radius: var(--radius-md);
          box-shadow: 0 8px 20px rgba(0,0,0,0.1);
          max-height: 350px;
          overflow-y: auto;
          padding: 2rem;
          animation: fadeIn 0.2s ease;
        }
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(8px); }
          to { opacity: 1; transform: translateY(0); }
        }

        /* Modal base (hidden by default) */
        .custom-search-modal {
          position: fixed;
          inset: 0;
          display: none;
          z-index: 9999;
        }
        .custom-search-modal.is-active {
          display: flex;
          align-items: center;
          justify-content: center;
        }
        .custom-search-overlay {
          position: absolute;
          inset: 0;
          background: rgba(0, 0, 0, 0.4);
        }
        .custom-search-box {
          position: relative;
          z-index: 1;
          width: 90%;
          max-width: 600px;
          background: var(--color-background);
          border-radius: 1rem;
          padding: 1rem;
          box-shadow: 0 12px 28px rgba(0, 0, 0, 0.2);
        }

        .custom-search-modal .custom-search-icon svg {
          display: none;
        }

        /* DESKTOP */
        @media (min-width: 769px) {
          /* Show full search form on desktop */
          .desktop-search {
            display: flex;
          }

          .custom-search-icon svg {
            width: 22px;
            height: 22px;
            display: block;
            stroke: #693f4c;
            fill: none;
            stroke: #693f4c;
           
          }

          .custom-search-icon svg path {
            stroke: #693f4c;
          }

          /* Hide mobile elements */
          .custom-search-toggle,
          .custom-search-modal {
            display: none !important;
          }

          /* Predictive dropdown below input */
          .desktop-search + .custom-search-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%;
            z-index: 99;
            background: var(--color-background);
            border: 1px solid var(--color-border);
            border-radius: var(--radius-md);
            max-height: 350px;
            overflow-y: auto;
            margin-top: 6px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.2s ease;
          }
        }

         /* Mobile */
        @media (max-width: 768px) {
        .custom-search-toggle {
          display: inline-flex !important;
          align-items: center;
          justify-content: center;
          fill: #693f4c;
          stroke: #693f4c;
          font-size: 1.75rem;
          padding: 0.25rem;
          background: none;
          border: none;
          cursor: pointer;
          max-width: inherit;
        }

        .desktop-search {
          display: none !important;
        }

          .custom-search-close {
            position: absolute;
            right: 20px;
            stroke: #693f4c;
          }

          .custom-search-icon {
            max-width: inherit;
          }
      }

    .custom-search-toggle svg {
      width: 20px;
      height: 20px;
      display: block;
      stroke: #693f4c;
      fill: none;
    }

    .custom-search-toggle svg path {
      stroke: #693f4c;
    }

    .custom-search-toggle svg {
    visibility: visible;
    display: inline-block;
    max-width: inherit;
    position: absolute;
    top: 12px;
    left: -166px;
  }

   .custom-search-close svg {
      width: 24px;
      height: 24px;
      display: block;
      stroke: #693f4c;
      fill: none;
    }

  .custom-search-close svg path {
      stroke: #693f4c;
    }
{% endstylesheet %}

<!-- <script>

   window.searchTranslations = {
    ariaOpen: "{{ 'custom_search.aria_open' | t }}",
    ariaClose: "{{ 'custom_search.aria_close' | t }}",
    noResults: "{{ 'custom_search.no_results' | t }}"
  };
  
  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("custom-search-modal");
    const toggle = document.querySelector(".custom-search-toggle");
    const closeTriggers = document.querySelectorAll("[data-close-search]");
    const inputs = document.querySelectorAll('[data-predictive-search-input]');

    inputs.forEach(input => {
      const resultsContainer = input.closest("form").nextElementSibling || input.closest(".custom-search-box")?.querySelector('.custom-search-dropdown');
      const resultsInner = resultsContainer?.querySelector('[data-search-results]');
      let debounceTimeout;

      input.addEventListener('input', function () {
        clearTimeout(debounceTimeout);
        const query = input.value.trim();

        if (!query) {
          resultsContainer.setAttribute('hidden', true);
          resultsInner.innerHTML = '';
          return;
        }

        debounceTimeout = setTimeout(() => {
          fetch(`/search/suggest?q=${encodeURIComponent(query)}&resources[type]=product&section_id=predictive-search`)
            .then(response => response.text())
            .then(html => {
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, 'text/html');
              const newResults = doc.querySelector('[data-search-results]');
              if (newResults) {
                resultsInner.innerHTML = newResults.innerHTML;
                resultsContainer.removeAttribute('hidden');
              }
            });
        }, 150);
      });

      input.addEventListener('blur', () => {
        setTimeout(() => {
          resultsContainer.setAttribute('hidden', true);
        }, 150);
      });

      input.addEventListener('focus', () => {
        if (input.value.trim()) {
          resultsContainer.removeAttribute('hidden');
        }
      });
    });

    function openSearch() {
      modal.classList.add("is-active");
      modal.querySelector('input')?.focus();
    }

    function closeSearch() {
      modal.classList.remove("is-active");
      modal.querySelector('input').value = '';
      const inner = modal.querySelector('[data-search-results]');
      inner.innerHTML = '';
      modal.querySelector('.custom-search-dropdown').setAttribute('hidden', true);
    }

    toggle?.addEventListener("click", openSearch);
    closeTriggers.forEach(btn => btn.addEventListener("click", closeSearch));
    document.addEventListener("keydown", e => e.key === "Escape" && closeSearch());
  });
</script> -->
              
<!-- <script>
  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("custom-search-modal");
    const toggle = document.querySelector(".custom-search-toggle");
    const closeTriggers = document.querySelectorAll("[data-close-search]");
    const inputs = document.querySelectorAll('[data-predictive-search-input]');

    inputs.forEach(input => {
      const resultsContainer = input.closest("form").nextElementSibling || input.closest(".custom-search-box")?.querySelector('.custom-search-dropdown');
      const resultsInner = resultsContainer?.querySelector('[data-search-results]');
      const noResultsText = input.dataset.noResults || "No results found";

      let debounceTimeout;

      input.addEventListener('input', function () {
        clearTimeout(debounceTimeout);
        const query = input.value.trim();

        if (!query) {
          resultsContainer.setAttribute('hidden', true);
          resultsInner.innerHTML = '';
          return;
        }

        debounceTimeout = setTimeout(() => {
          fetch(`/search/suggest?q=${encodeURIComponent(query)}&resources[type]=product&section_id=predictive-search`)
            .then(response => response.text())
            .then(html => {
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, 'text/html');
              const newResults = doc.querySelector('[data-search-results]');
              if (newResults && newResults.innerHTML.trim() !== '') {
                resultsInner.innerHTML = newResults.innerHTML;
              } else {
                resultsInner.innerHTML = `<div class="no-results">${noResultsText}</div>`;
              }
              resultsContainer.removeAttribute('hidden');
            });
        }, 150);
      });

      input.addEventListener('blur', () => {
        setTimeout(() => {
          resultsContainer.setAttribute('hidden', true);
        }, 150);
      });

      input.addEventListener('focus', () => {
        if (input.value.trim()) {
          resultsContainer.removeAttribute('hidden');
        }
      });
    });

    function openSearch() {
      modal.classList.add("is-active");
      modal.querySelector('input')?.focus();
    }

    function closeSearch() {
      modal.classList.remove("is-active");
      modal.querySelector('input').value = '';
      const inner = modal.querySelector('[data-search-results]');
      inner.innerHTML = '';
      modal.querySelector('.custom-search-dropdown').setAttribute('hidden', true);
    }

    toggle?.addEventListener("click", openSearch);
    closeTriggers.forEach(btn => btn.addEventListener("click", closeSearch));
    document.addEventListener("keydown", e => e.key === "Escape" && closeSearch());
  });
</script> -->

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("custom-search-modal");
    const toggle = document.querySelector(".custom-search-toggle");
    const closeTriggers = document.querySelectorAll("[data-close-search]");
    const inputs = document.querySelectorAll('[data-predictive-search-input]');

    inputs.forEach(input => {
      const resultsContainer = input.closest("form").nextElementSibling || input.closest(".custom-search-box")?.querySelector('.custom-search-dropdown');
      const resultsInner = resultsContainer?.querySelector('[data-search-results]');
      const noResultsText = input.dataset.noResults || "No results found";

      let debounceTimeout;

      input.addEventListener('input', function () {
        clearTimeout(debounceTimeout);
        const query = input.value.trim();

        if (!query) {
          resultsContainer.setAttribute('hidden', true);
          resultsInner.innerHTML = '';
          return;
        }

        debounceTimeout = setTimeout(() => {
          fetch(`/search/suggest?q=${encodeURIComponent(query)}&resources[type]=product&section_id=predictive-search`)
            .then(response => response.text())
            .then(html => {
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, 'text/html');
              const newResults = doc.querySelector('[data-search-results]');
              if (newResults && newResults.innerHTML.trim() !== '') {
                resultsInner.innerHTML = newResults.innerHTML;
              } else {
                resultsInner.innerHTML = `<div class="no-results">${noResultsText}</div>`;
              }
              resultsContainer.removeAttribute('hidden');
            });
        }, 150);
      });

      input.addEventListener('blur', () => {
        setTimeout(() => {
          resultsContainer.setAttribute('hidden', true);
        }, 150);
      });

      input.addEventListener('focus', () => {
        if (input.value.trim()) {
          resultsContainer.removeAttribute('hidden');
        }
      });
    });

    function openSearch() {
      modal.classList.add("is-active");
      modal.querySelector('input')?.focus();
    }

    function closeSearch() {
      modal.classList.remove("is-active");
      modal.querySelector('input').value = '';
      const inner = modal.querySelector('[data-search-results]');
      inner.innerHTML = '';
      modal.querySelector('.custom-search-dropdown').setAttribute('hidden', true);
    }

    toggle?.addEventListener("click", openSearch);
    closeTriggers.forEach(btn => btn.addEventListener("click", closeSearch));
    document.addEventListener("keydown", e => e.key === "Escape" && closeSearch());
  });
</script>              

              
